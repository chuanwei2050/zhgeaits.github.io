---
layout: post
title:  "作为面向对象的程序员，不懂UML，不如回家种番薯吧！"
date:   2012-07-17 11:00:03
categories: other
type: other
---

# UML是什么？

当你还没有写代码的时候，你已经对这个系统是胸有成足了，其实就是对这个软件系统进行了建模，把抽象的代码转换成了可视化的模型，那么就需要一种建模语言来表示，UML（Unified Modeling language统一建模语言）就是统一了大部分而成为了标准的。
它是帮助面向对象程序设计（Object-Oriented Programming, OOP）的一种建模方法。那么问题来了，什么是面向对象编程？

# 面向对象编程

它既是一种自上而下的编程思想，又是一种自下而上的程序设计方法。现实中的对象是某种可能被人感知的事物，也是思维、感觉或动作所能作用的物质或精神体。而所谓软件对象，是一种将状态和行为有机结合起来形成的软件架构模型，它可以用来描述现实世界中的一个对象。其实它就是类，也是类的实例化。它具有抽象，多态性，封装性，继承这些绝对的优势。这让我们很容易混淆面向过程的结构化编程，因为它也是自上而下的，划分成多个函数去实现，模块化，细想并没有多大的区别。其实不用想太多，都是编程而已，只不过思想不一样罢了，本质都是一样的。它们不可能完完全全分开的，是有非常多的交叉的。

最大的区别在于设计软件系统的时候大家的方法不一样（方法论不一样），面向过程的就不断地分析软件的运行过程改怎么样怎么样，每一步设计都非常的详细，划分出很多个模块，模块之间的调用顺序都非常明确。而面向对象的设计方法就是，对这个软件世界进行建模，然后建立多个对象，也就是类，定义好这些类的属性，这些类可以执行什么动作，有哪些状态，会接受什么消息或者事件而出发动作。所以说，面向对象是一种以对象为基础，以事件或消息来驱动对象执行处理的程序设计技术。

我个人的经验，其实两者是结合着来使用的，一开始对软件进行需求分析，建立软件框架的时候，用到面向对象的方法论，利用四个特性是非常的有效，非常的快速，能定位到需求和实现。抽象，信息隐藏，模块化（对象），高内聚，低耦合，绝对的设计准则。但是在每一个对象具体实现一些功能的时候，还是需要用到面向过程的编程方法，毕竟，这非常适合我们的思考方式，明确快捷，一步一步来编写代码。其实，这不就是同步和异步的结合么？异步来编程是很痛苦的，不适合我们普通人类的思维方式，而且很难发现问题，同步就不一样了，思路简单明确。

所以说一个好的软件框架，肯定是用面向对象的方法论实现的，能快速分析复杂的需求，完成设计，肯定也是用到面向对象的思想，但是到了具体去写每一行业务逻辑代码的时候，你肯定是按照面向过程的套路去写的。你想想，架构要面向对象的，但是算法实现总不能也是面向对象了吧？然后还有一个重要问题就是要思考到效率问题，有时候可能面向过程的实现更好，而且性能效率好，那就认真思考怎么优化了。

好吧，这个东西非常高大上，博大精深，思想永远说不完，我这里就总结了一下自己的经验心得和用得非常多的，也是对自己成长有绝对帮助的东东了。因为它确实在我工作中起到了非常大的作用，使用它使得每个需求都解决得心应手。

UML的核心是图，建模就是画图，因为图很明显地表现出来了你的软件世界是怎么样的。下面我就总结一下。

# 用例图

第一个要用到的是用例图，对于一个软件，你首先想到的就是，它是干嘛的？那么它是给谁用的？不管你的用户是真实的人，还是被别的模块调用，总得有用户用某一个功能。分析需求的过程就是这样的了，你从高层分析软件有哪些功能，或者功能的集合，其实就是用例，功能无非就是一些列操作的集合，有输入和输出；然后分析哪些人来使用这个功能（用例）。对于功能的定义需要经验的积累。

# 类图

需求分析完了以后就是系统的设计了，整个系统的架构就要出现了（像是概要设计）。你需要分析系统有哪些对象，哪些类，不管是用户，还是用例功能，任何一个地方，都是一个对象，它包含了属性和能做的事情（方法函数，不用定义详细接口）。这时候我们不需要确定类的调用关系，只需要确定类之间的静态关系（依赖，泛化，关联）就可以了。别忘了，工具类也是一个对象。

# 序列图

建立了系统的对象世界以后，那么就是具体每一个用例的执行流程了（详细设计）。类与类之间，或者说对象与对象之间，怎么按照时间的顺序进行调用来完成一个用例功能。你还是不需要考虑到每一个接口的参数如何，只需要关键的即可。序列图是最直观的，便于思考和讨论，平时我们口头上交流的最多使用到的就是这个序列图了。

# 状态图

完成序列图以后，基本上也就明白清楚了系统的流程了，可以写出主要的逻辑代码了；但是这样写出来的代码是很脆弱的，很不安全的，因为你还没考虑到异常的情况，不能想当然认为是对的。很可能对象处于一个非正常的状态下，按序列图出来的结构就是错误的了。每个对象都会有不同的状态，在不同的状态下该做什么操作，状态之间的转换方程是什么，我们必须清晰的考虑到，并作出相应的处理，我们的系统才够健壮。这就是我们平时所说的状态机了，作为一个程序员，状态机都玩得不熟，就是码农了！状态机就是对象的完整生命历程的模型了。

完成以上四个建模以后，数据库设计，详细的接口设计其实都是清晰可见的了，这个时候写代码就简单多了，不需要过多考虑业务逻辑了，我们考虑更多的是怎么实现，采取什么数据结构和算法，不用考虑异步的过程了，直接同步地去编程吧！

# 活动图

当一个用例比较复杂的时候，序列图还是可以应付几个对象的情况。但是如果一个业务单元级别上的控制流程用例，设计到两个或者多个用户的时候，用序列图来画就很繁杂了，例如出现分支情况，我们往上抽象一层，建立活动图。活动图出来以后，再按照分支或者单个流程分别建立序列图。

# 工具使用StarUML

这个是最简单的了，也比较好用。